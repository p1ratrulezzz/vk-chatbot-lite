'use strict';

/**
 * Module dependencies.
 * @private
 */
const EventEmitter = require('events');
const path         = require('path');
const fetch        = require('../../../lib/fetch');
const pino         = require('../../../lib/pino');
const config       = require('../../../config');

/**
 * Local constants.
 * @private
 */
const HTML_ENTITIES = [[/&lt;/g, '<'], [/&gt;/g, '>'], [/&amp;/g, '&'], [/&quot;/g, '"'], [/<br>/g, '. ']];

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–∞—Å—Å–∏–≤–∞ LongPoll-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
 * @param   {Array}  item Update item
 * @return  {Object}
 * @private
 */
function assembleMessage (item) {
  const attachments = item[7] || Object.create(null);
  const messageId   = item[1];
  let   message     = item[6] || '';

  const mchatSenderId = parseInt(attachments.from);
  const isMultichat   = mchatSenderId && true || false;

  const conversationId = isMultichat ? (item[3] - 2000000000) : item[3];
  const senderId       = isMultichat ? mchatSenderId : conversationId;

  // Decode HTML entities.
  for (const [replaceWhat, replaceWith] of HTML_ENTITIES) {
    message = message.replace(replaceWhat, replaceWith);
  }

  return {
    attachments,                     // <Object>  –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    body:            message,        // <String>  –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_id:      messageId,      // <Number>  ID —Å–æ–æ–±—â–µ–Ω–∏—è
    conversation_id: conversationId, // <Number>  ID –¥–∏–∞–ª–æ–≥–∞
    sender_id:       senderId,       // <Number>  ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    is_multichat:    isMultichat     // <Boolean> true, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–µ—Å–µ–¥—É
  }
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.
 * @param   {Object/String} resultObject  –û–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—É–ª –ø–∞—Ä—Å–µ—Ä
 * @param   {Object}        messageObject –ò—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @return  {Object}
 * @private
 */
function buildMessage (resultObject = {}, messageObject = {}) {
  if (typeof resultObject === 'string') {
    resultObject = {
      message: resultObject
    }
  }

  const conversationType = messageObject.is_multichat ? 'chat_id' : 'user_id';
  const conversationId   = messageObject.conversation_id;

  const message = resultObject.message || '';

  let forwards = resultObject.forward_messages || '';

  if (forwards && Array.isArray(forwards)) {
    forwards = forwards.join(',');
  }

  if (!forwards) {
    if (resultObject.forward === true) {
      forwards = messageObject.message_id;
    }

    if (resultObject.forward === undefined) {
      forwards = messageObject.is_multichat ? messageObject.message_id : '';
    }
  }

  // –ù–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
  if (!message && !forwards) {
    return;
  }

  return {
    message,
    [conversationType]: conversationId,
    forward_messages:   forwards
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
 * @param {Object}
 *   @property {Bot}           bot           –≠–∫–∑–µ–º–ø–ª—è—Ä "Bot"
 *   @property {Object}        messageObject –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @return {Promise => Object}
 * @public
 */
async function processMessage (bot, messageObject) {
  const eventType = getEventTypeForMessage(bot, messageObject);

  if (!eventType) {
    return;
  }

  const eventHandler = require(path.join(config['events-path'], eventType));

  // eventHandler should not throw an error.
  const handleResult = await eventHandler(bot, messageObject);

  if (!handleResult) {
    return;
  }

  return buildMessage(handleResult, messageObject);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
 * @param  {Bot}     bot           –≠–∫–∑–µ–º–ø–ª—è—Ä "Bot"
 * @param  {Object}  messageObject –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–æ—Ç–æ–≤—ã–π –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
 * @return {Promise}
 * @public
 */
function sendMessage (bot, messageObject) {
  return bot.api.call('messages.send', messageObject)
    .catch(error => {
      if (error.name === 'VkApiError') {
        // –§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å. –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è —Å–º–∞–π–ª–∏–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å–Ω–æ–≤–∞.
        if (error.code === 9) {
          messageObject.message = messageObject.message + ' üòä';

          return sendMessage(bot, messageObject);
        }

        // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ-–Ω–æ–≤–æ–π –Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ–º.
        if (error.code === 10) {
          return;
        }

        // –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –±–æ—Ç–∞ –∫–∏–∫–Ω—É–ª–∏ –∏–∑ –±–µ—Å–µ–¥—ã –∏
        // –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –Ω–µ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
        if (error.code === 7) {
          return;
        }

        // –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω—ë—Å –±–æ—Ç–∞ –≤ –ß–°, –ø–æ—Ç–æ–º—É –∫–∞–∫
        // –∫–æ–¥ –æ—à–∏–±–∫–∏ 902 –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        // —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–≤—è–∑–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.
        if (error.code === 902) {
          return;
        }
      }

      pino.error('Bot id%d unable to send a message.', bot.id, error);

      return;
    });
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @param   {Bot}         bot     –≠–∫–∑–µ–º–ø–ª—è—Ä "Bot"
 * @param   {Object}      message –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @return  {String/null}
 * @private
 *
 * –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:
 *   appeal           –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞—Ç–∏–ª—Å—è –∫ –±–æ—Ç—É
 *   bot-invited      –í –±–µ—Å–µ–¥—É –±—ã–ª –ø—Ä–∏–≥–ª–∞—à—ë–Ω –±–æ—Ç
 *   bot-kicked       –ò–∑ –±–µ—Å–µ–¥—ã –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω –±–æ—Ç
 *   bot-left         –ò–∑ –±–µ—Å–µ–¥—ã –±–æ—Ç –≤—ã—à–µ–ª —Å–∞–º
 *   chat-created     –ë—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –±–µ—Å–µ–¥–∞ –≤–º–µ—Å—Ç–µ —Å –±–æ—Ç–æ–º
 *   gift             –ë–æ—Ç—É –ø—Ä–∏—Å–ª–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫
 *   user-invited     –í –±–µ—Å–µ–¥—É –±—ã–ª –ø—Ä–∏–≥–ª–∞—à—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 */
function getEventTypeForMessage (bot, message) {
  const attachments = message.attachments;

  if (attachments) {
    if (attachments.attach1_type === 'gift') {
      return 'gift';
    }

    if (attachments.source_act === 'chat_create') {
      return 'chat-created';
    }

    if (attachments.source_act === 'chat_invite_user') {
      if (parseInt(attachments.source_mid) !== bot.id) {
        return 'user-invited';
      }

      if (message.sender_id !== bot.id) {
        return 'bot-invited';
      }
    }

    if (attachments.source_act === 'chat_kick_user') {
      if (message.sender_id !== bot.id) {
        return 'bot-kicked';
      }

      return 'bot-left';
    }
  }

  if (message.is_multichat) {
    const pattern = bot.pattern || config['default-pattern'];

    if (pattern && pattern.test(message.body)) {
      return 'appeal';
    }

    return null;
  }

  return 'appeal';
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç LongPoll-–∑–∞–ø—Ä–æ—Å.
 * @param  {Bot}     bot  –≠–∫–∑–µ–º–ø–ª—è—Ä "Bot"
 * @param  {String}  link LongPoll Server URL
 * @return {Promise}
 * @public
 */
function makeALongPollRequest (bot, link = '') {
  if (!link) {
    return bot.api.call('messages.getLongPollServer', { lp_version: 2 })
      .then(response => {
        return makeALongPollRequest(
          bot,
          `https://${response.server}?act=a_check&wait=25&mode=2&key=${response.key}&ts=${response.ts}`
        );
      })
      .catch(error => {
        // –ù–µ –ø–∏—à–µ–º –≤ –ª–æ–≥ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
        if (!(error.name === 'VkApiError' && error.code === 10)) {
          pino.error('Unable to get LongPoll server info.', error);
        }

        return makeALongPollRequest(bot);
      });
  }

  return fetch(link)
    .then(response => {
      if (response.status !== 200) {
        // LongPoll Server –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –æ—á–µ–Ω—å —á–∞—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404, 500-504 –∏ –ø—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏.
        // –ü–æ–≤—Ç–æ—Ä–∏–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 1,5 —Å–µ–∫—É–Ω–¥—ã.
        return setTimeout(() => makeALongPollRequest(bot), 1500);
      }

      return response.json()
        .then(resJson => {
          // –ü–∞—Ä–∞–º–µ—Ç—Ä "key" —É—Å—Ç–∞—Ä–µ–ª, –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–µ "key" –∏ "ts".
          if (resJson.failed && resJson.failed !== 1) {
            return makeALongPollRequest(bot);
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º "ts" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
          link = link.replace(/ts=.*/, 'ts=' + resJson.ts);

          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.
          if (!resJson.updates || !resJson.updates.length) {
            return makeALongPollRequest(bot, link);
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
          makeALongPollRequest(bot, link);

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
          processUpdates(bot.id, resJson.updates);

          return;
        });
    })
    .catch(error => setTimeout(() => makeALongPollRequest(bot), 1500));
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç LongPoll-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
 * @param   {Number}         id      ID –±–æ—Ç–∞
 * @param   {Array of Array} updates –ú–∞—Å—Å–∏–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π [vk.com/dev/using_longpoll]
 * @return  {void}
 * @private
 */
function processUpdates (id, updates) {
  for (const item of updates) {
    const mchatSenderId = item[7] && item[7].from && parseInt(item[7].from);
    const flags         = item[2];

    if (
      // –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
      item[0] === 4 &&

      // –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ.
      (flags & 1) !== 0 &&

      // –°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –≤—Ö–æ–¥—è—â–∏–º.
      (flags & 2) === 0 &&

      // –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—Å–ª–∞–ª –¥—Ä—É–≥.
      // * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–µ—Å–µ–¥—É, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      // —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è "–¥—Ä—É–∑—å—è–º–∏".
      (
        (flags & 32) !== 0 || mchatSenderId
      ) &&

      // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è - –Ω–µ –±–æ—Ç.
      (
        // –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–µ—Å–µ–¥—ã.
        mchatSenderId && mchatSenderId !== id ||

        // –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–∏—á–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
        item[3] !== id
      )
    ) {
      module.exports.emitter.emit(`message:${id}`, assembleMessage(item));

      continue;
    }
  }
}

module.exports = {
  emitter: new EventEmitter(),

  process:          processMessage,
  send:             sendMessage,
  startLongPolling: makeALongPollRequest
}
